package app

import play.api._
import play.api.mvc._
import play.api.libs.concurrent.Execution.Implicits.defaultContext
import play.api.libs.json._

import scala.util.parsing.combinator._
import parsers._
import scala.util.{Try, Success, Failure}
import scala.concurrent._

// Reactive Mongo imports
import reactivemongo.api._

// Reactive Mongo plugin, including the JSON-specialized collection
import play.modules.reactivemongo.MongoController
import play.modules.reactivemongo.json.collection.JSONCollection
import inputLanguages._

object ApplicationJson{
   
    
    import models._
    import models.JsonFormats._
    def main() {
      
      val filename = Try{io.StdIn.readLine("\nPlease enter the filename where the questions are: ")}
      filename match {
        case Success(name) => {
          getLanguageParser(name) match {
            case Some(parser) => {
               parser.execute(name) match {
                 case Some(questions) => saveData(questions)
                 case None => main
               }
                 
            }
            case None => {
              System.err.println("File extension must be either .gift or .xml")
              main
            }
          }}
        case Failure(ex) => {
           println("Something was wrong: " + ex.getMessage)
           main
        }
      }

     
    }
  
  

    
  def saveData(questions: Seq[Question]) = {
    val driver = new MongoDriver
    val connection = driver.connection(List("localhost:27017"))
    val db = connection("trivial")
    val collection: JSONCollection = db.collection[JSONCollection]("questions")
    Await.result(questions.map { question => { collection.insert(question) } })
    connection.close()
  }
    

  def getLanguageParser(filename: String): Option[Parser] = {
    if(filename.endsWith(".gift"))
      Some(new GIFTParser())
    else if(filename.endsWith(".xml"))
      Some(new XMLParser())
    else None
  }
          
}